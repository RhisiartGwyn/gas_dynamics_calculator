<html><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252"><title>Compressible Aerodynamics Calculator</title>
<script language="JavaScript">

function isent(form) {
  i=form.i.selectedIndex
  g=eval(form.g.value)
  v=eval(form.v.value)
  if(g<=1.0) {
    alert("gamma must be greater than 1")
    return}

  if(i==1) {
    if(v>=1.0 || v<=0.0) {
      alert("T/T0 must be between 0 and 1")
      return}
    m=Math.sqrt(2.*((1./v)-1.)/(g-1.))}
  else if(i==2) {
    if(v>=1.0 || v<=0.0) {
      alert("p/p0 must be between 0 and 1")
      return}
    m=Math.sqrt(2.*((1./Math.pow(v,(g-1.)/g))-1.)/(g-1.))}
  else if(i==3) {
    if(v>=1.0 || v<=0.0) {
      alert("rho/rho0 must be between 0 and 1")
      return}
    m=Math.sqrt(2.*((1./Math.pow(v,(g-1.)))-1.)/(g-1.))}
  else if(i==4 || i==5) {
    if(v<=1.0) {
      alert("A/A* must be greater than 1")
      return}
    mnew=0.00001
    m=0.0
    if(i==5) {mnew=2.}
    while( Math.abs(mnew-m) > 0.000001) {
      m=mnew
      phi=aas(g,m)
      s=(3. - g) / (1. + g)
      mnew=m - (phi - v) / (Math.pow(phi * m,s) - phi / m)}}
  else if(i==6) {
    if(v<=0.0 || v>=90.0) {
      alert("Mach angle must be between 0 and 90")
      return}
    m=1./Math.sin(v*3.14159265359/180.)}
  else if(i==7) {
    gparm=Math.sqrt((g+1.)/(g-1.))
    numax=(gparm-1)*90.
    if(v<=0.0 || v>=numax) {
      alert("Prandtl-Meyer angle must be between 0 and "+format(""+numax))
      return}
    etanew=1.5
    eta=0.0
    while( Math.abs(etanew-eta) > 0.00001) {
      eta=etanew
      fm=gparm*Math.atan(eta/gparm)-Math.atan(eta)-v*3.14159265359/180.
      fdm=1./(Math.pow(eta/gparm,2.)+1.)-1./(eta*eta+1.)
      etanew=eta-fm/fdm}
    m=Math.sqrt(etanew*etanew+1)}
  else {
    if(v<=0.0) {
      alert("M must be greater than 0")
      return}
    m=v}
  form.m.value=format(""+m)
  if(m>1.) {
    form.mu.value=format(""+Math.asin(1./m)*180/3.14159265359)
    form.nu.value=format(""+nu(g,m))}
  else if (m==1) {
    form.mu.value=90.
    form.nu.value=0.}
  else {
    form.mu.value=""
    form.nu.value=""}
  form.tt0.value = format(""+tt0(g,m))
  form.pp0.value = format(""+pp0(g,m))
  form.rr0.value = format(""+rr0(g,m))
  aa0 = Math.sqrt(tt0(g,m))
  form.aa0.value = format(""+aa0);
  form.tts.value = format(""+tts(g,m))
  form.pps.value = format(""+pps(g,m))
  form.rrs.value = format(""+rrs(g,m))
  form.aas.value = format(""+aas(g,m))
}

function nsr(form) {
  i=form.i.selectedIndex
  g=eval(form.g.value)
  v=eval(form.v.value)
  if(g<=1.0) {
    alert("gamma must be greater than 1")
    return}

  if(i==1) {
    if(v>=1.0 || v<=Math.sqrt((g-1.)/2./g)) {
      alert("M2 must be between "+ format(""+Math.sqrt((g-1.)/2./g))+" and 1")
      return}
    m1=m2(g,v)}
  else if(i==2) {
    if(v<=1.0) {
      alert("p2/p1 must be greater than 1")
      return}
    m1=Math.sqrt((v-1.)*(g+1.)/2./g +1.)}
  else if(i==3) {
    if(v<=1.0 || v>=(g+1.)/(g-1.)) {
      alert("rho2/rho1 must be between 1 and "+format(""+((g+1.)/(g-1.))))
      return}
    m1=Math.sqrt(2.*v/(g+1.-v*(g-1.)))}
  else if(i==4) {
    if(v<=1.0) {
      alert("T2/T1 must be greater than 1")
      return}
    aa=2.*g*(g-1.)
    bb=4.*g-(g-1.)*(g-1.)-v*(g+1.)*(g+1.)
    cc=-2.*(g-1.)
    m1=Math.sqrt((-bb+Math.sqrt(bb*bb-4.*aa*cc))/2./aa)}
  else if(i==5) {
    if(v>=1.0 || v<=0.0) {
      alert("p02/p01 must be between 0 and 1")
      return}
    mnew=2.0
    m1=0.0
    while( Math.abs(mnew-m1) > 0.00001) {
      m1=mnew
      al=(g+1.)*m1*m1/((g-1.)*m1*m1+2.)
      be=(g+1.)/(2.*g*m1*m1-(g-1.))
      daldm1=(2./m1-2.*m1*(g-1.)/((g-1.)*m1*m1+2.))*al
      dbedm1=-4.*g*m1*be/(2.*g*m1*m1-(g-1.))
      fm=Math.pow(al,g/(g-1.))*Math.pow(be,1./(g-1.))-v
      fdm=g/(g-1.)*Math.pow(al,1/(g-1.))*daldm1*Math.pow(be,1./(g-1.))+Math.pow(al,g/(g-1.))/(g-1.)*Math.pow(be,(2.-g)/(g-1.))*dbedm1
      mnew=m1-fm/fdm}}
  else if(i==6) {
    vmax=Math.pow((g+1.)/2.,-g/(g-1.))
    if(v>=vmax || v<=0.0) {
      alert("p1/p02 must be between 0 and "+format(""+vmax))
      return}
    mnew=2.0
    m1=0.0
    while( Math.abs(mnew-m1) > 0.00001) {
      m1=mnew
      al=(g+1.)*m1*m1/2.
      be=(g+1.)/(2.*g*m1*m1-(g-1.))
      daldm1=m1*(g+1.)
      dbedm1=-4.*g*m1*be/(2.*g*m1*m1-(g-1.))
      fm=Math.pow(al,g/(g-1.))*Math.pow(be,1./(g-1.))-1./v
      fdm=g/(g-1.)*Math.pow(al,1/(g-1.))*daldm1*Math.pow(be,1./(g-1.))+Math.pow(al,g/(g-1.))/(g-1.)*Math.pow(be,(2.-g)/(g-1.))*dbedm1
      mnew=m1-fm/fdm}}
    
  else {
    if(v<=1.0) {
      alert("M1 must be greater than 1")
      return}
    m1=v}
  form.m1.value=format(""+m1)
  form.m2.value=format(""+m2(g,m1))
  p2p1=1.+2.*g/(g+1.)*(m1*m1-1.)
  form.p2p1.value = format(""+p2p1)
  p02p01=pp0(g,m1)/pp0(g,m2(g,m1))*p2p1
  form.p02p01.value=format(""+p02p01)
  form.r2r1.value=format(""+rr0(g,m2(g,m1))/rr0(g,m1)*p02p01)
  form.t2t1.value=format(""+tt0(g,m2(g,m1))/tt0(g,m1))
  form.p1p02.value=format(""+pp0(g,m1)/p02p01)
  a2a1 = Math.sqrt(tt0(g,m2(g,m1))/tt0(g,m1))
  form.a2a1.value=format(""+a2a1)
}

function osr(form) {
  i=form.i.selectedIndex
  g=eval(form.g.value)
  m1=eval(form.m.value)
  if(g<=1.0) {
    alert("gamma must be greater than 1")
    return}

  if(m1<=1.0) {
    alert("m1 must be greater than 1")
    return}
  if(i==0 || i==1) {
    delta=eval(form.a.value)*3.14159265359/180.
    if(delta>=3.14159265359/2.) {
      alert("Turning angle too large")
      return}
    if(delta<=0.0) {
      alert("Turning angle must be greater than zero")
      return}
    beta=mdb(g,m1,delta,i)
    if(beta<0.0) {
      form.beta.value=""
      form.delta.value=""
      form.m1n.value=""
      form.m2n.value=""
      form.m2.value="Shock"
      form.p2p1.value ="Detached"
      form.p02p01.value=""
      form.r2r1.value=""
      form.t2t1.value=""
      return}}
  else if(i==2) {
    beta=eval(form.a.value)*3.14159265359/180.
    if(beta>=3.14159265359/2.) {
      alert("Shock angle must be less than 90 deg.")
      return}
    if(beta-Math.asin(1./m1)<=0.0) {
      alert("Shock angle must be greater than Mach angle")
      return}
    delta=mbd(g,m1,beta)}
  else if(i==3) {
    m1n=eval(form.a.value)
    if(m1n<=1.0 || m1n>=m1) {
      alert("M1n must be between 1 and M1")
      return}
    beta=Math.asin(m1n/m1)
    delta=mbd(g,m1,beta)}

  m1n=m1*Math.sin(beta)
  form.beta.value=format(""+beta*180./3.14159265359)
  form.delta.value=format(""+delta*180/3.14159265359)
  form.m1n.value=format(""+m1n)
  form.m2n.value=format(""+m2(g,m1n))
  form.m2.value=format(""+form.m2n.value/Math.sin(beta-delta))
  p2p1 = 1.+2.*g/(g+1.)*(m1n*m1n-1.)
  form.p2p1.value = format(""+p2p1)
  p02p01=pp0(g,m1n)/pp0(g,m2(g,m1n))*p2p1
  form.p02p01.value= format(""+p02p01)
  form.r2r1.value=format(""+rr0(g,m2(g,m1n))/rr0(g,m1n)*p02p01)
  form.t2t1.value=format(""+tt0(g,m2(g,m1n))/tt0(g,m1n))
  
  // compute sigma_max
  term1 = (Math.pow(m1, 2) * (1 + g) - 4) / (2 * Math.pow(m1, 2) * g)
  term2 = (Math.pow(m1, 2) * (1 + g) + 2) / (2 * Math.pow(m1, 4) * g)
  inner_sqrt = Math.sqrt(Math.pow(term1, 2) + 4 * term2)
  sqrt_term = Math.sqrt((term1 + inner_sqrt) / 2)
  sig_max = Math.asin(sqrt_term) * 180 / 3.14159265359
  form.sig_max.value = format(""+sig_max)
  //
  
  // compute theta_max
  aaa = (Math.pow(m1, 2) * (1 + g) - 4) / (2 * Math.pow(m1, 2) * g)
  bbb = (Math.pow(m1, 2) * (1 + g) + 2) / (2 * Math.pow(m1, 4) * g)
  ccc = aaa + Math.sqrt(Math.pow(aaa, 2) + 4 * bbb)
  beta_star = Math.asin(Math.sqrt(ccc / 2))
  theta_max = Math.atan(Math.sqrt(2 / ccc - 1) * (Math.pow(m1, 2) * ccc - 2) / (Math.pow(m1, 2) * (1 + g - ccc) + 2)) * 180 / 3.14159265359
  form.theta_max.value = format(""+theta_max)
  //
}

function TtTtSR(g,m){
	return 2.*(1.+g)*Math.pow(m,2.)/Math.pow(1.+g*Math.pow(m,2.),2.)*(1.+((g-1.)/2.)*Math.pow(m,2.))}

function TTSR(g,m){
	return Math.pow(m,2.)*Math.pow(1.+g,2.)/Math.pow((1.+g*Math.pow(m,2.)),2.)}

function PPSR(g,m){
	return (1.+g)/(1.+g*Math.pow(m,2.))}
	
function PtPtSR(g,m){
	return (1.+g)/(1.+g*Math.pow(m,2.))*Math.pow((1.+(g-1.)/2.*Math.pow(m,2.))/((g+1.)/2.),g/(g-1.))}

function VVSR(g,m){
	return (1.+g)*Math.pow(m,2.)/(1.+g*Math.pow(m,2.))}
	
function SmaxRR(g,m){
	return -g/(g-1.)*Math.log(Math.pow(m,2.)*Math.pow((g+1.)/(1.+g*Math.pow(m,2.)),(g+1.)/g))}

function TTSF(g,m){
	return ((g+1.)/2.)/(1.+((g-1.)/2.)*Math.pow(m,2.))}

function PPSF(g,m){
	return (1./m)*Math.sqrt(((g+1.)/2.)/(1+((g-1.)/2.)*Math.pow(m,2.)))}
	
function PTPTSF(g,m){
	return (1./m)*Math.pow((1.+((g-1.)/2.)*Math.pow(m,2.))/((g+1.)/2.),((g+1.)/(2.*(g-1.))))}
	
function VVSF(g,m){
	return m*Math.sqrt(((g+1.)/2.)/(1.+((g-1.)/2.)*Math.pow(m,2.)))}

function fLmaxD(g,m){
	return ((g+1.)/(2.*g))*Math.log(((g+1.)/2.)*Math.pow(m,2.)/(1.+((g-1.)/2.)*Math.pow(m,2.)))+(1./g)*(1./Math.pow(m,2)-1.)}
		
function SmaxRF(g,m){
	return Math.log((1./m)*Math.pow((1.+((g-1.)/2.)*Math.pow(m,2.))/(1.+((g-1.)/2.)),(g+1.)/(2.*(g-1.))))}
	
function tt0(g,m) {
   return Math.pow((1.+(g-1.)/2.*m*m),-1.)}

function pp0(g,m) {
   return Math.pow((1.+(g-1.)/2.*m*m),-g/(g-1.))}

function rr0(g,m) {
   return Math.pow((1.+(g-1.)/2.*m*m),-1./(g-1.))}

function tts(g,m) {
   return tt0(g,m)*(g/2. + .5)}

function pps(g,m) {
   return pp0(g,m)*Math.pow((g/2. + .5),g/(g-1.))}

function rrs(g,m) {
   return rr0(g,m)*Math.pow((g/2. + .5),1./(g-1.))}

function aas(g,m) {
   return 1./rrs(g,m)*Math.sqrt(1./tts(g,m))/m}

function nu(g,m) {
   n=Math.sqrt((g + 1.) / (g - 1.)) * Math.atan(Math.sqrt((g - 1.) / (g + 1.) * (m * m - 1.)))
   n=n - Math.atan(Math.sqrt(m * m - 1.))
   n=n*180./3.14159265359
   return n}

function m2(g,m1) {
   return Math.sqrt((1. + .5 * (g - 1.) * m1 * m1) / (g * m1 * m1 - .5 * (g - 1.)))}

function mdb(g,m1,d,i) {
  p=-(m1*m1+2.)/m1/m1-g*Math.sin(d)*Math.sin(d)
  q=(2.*m1*m1+1.)/Math.pow(m1,4.)+((g+1.)*(g+1.)/4.+(g-1.)/m1/m1)*Math.sin(d)*Math.sin(d)
  r=-Math.cos(d)*Math.cos(d)/Math.pow(m1,4.)

  a=(3.*q-p*p)/3.
  b=(2.*p*p*p-9.*p*q+27.*r)/27.

  test=b*b/4.+a*a*a/27.

  if(test>0.0) {return -1.0}
  else {
    if(test==0.0) {
      x1=Math.sqrt(-a/3.)
      x2=x1
      x3=2.*x1
      if(b>0.0) {
        x1*=-1.
        x2*=-1.
        x3*=-1.}}
    if(test<0.0) {
      phi=Math.acos(Math.sqrt(-27.*b*b/4./a/a/a))
      x1=2.*Math.sqrt(-a/3.)*Math.cos(phi/3.) 
      x2=2.*Math.sqrt(-a/3.)*Math.cos(phi/3.+3.14159265359*2./3.)
      x3=2.*Math.sqrt(-a/3.)*Math.cos(phi/3.+3.14159265359*4./3.)  
      if(b>0.0) {
        x1*=-1.
        x2*=-1.
        x3*=-1.}}
    
    s1=x1-p/3.
    s2=x2-p/3.
    s3=x3-p/3.
  
    if(s1<s2 && s1<s3) {
      t1=s2
      t2=s3}
    else if(s2<s1 && s2<s3) {
      t1=s1
      t2=s3}
    else {
      t1=s1
      t2=s2}

    b1=Math.asin(Math.sqrt(t1))
    b2=Math.asin(Math.sqrt(t2))

    betas=b1
    betaw=b2
    if(b2>b1) {
      betas=b2
      betaw=b1}
    
    if(i==0) {return betaw}
    if(i==1) {return betas}}
}

function mbd(g,m1,b) {
   return Math.atan((m1*m1*Math.sin(2.*b)-2./Math.tan(b))/(2.+m1*m1*(g+Math.cos(2.*b))))}

function format(s) {

  val=eval(s)
  
  if(Math.abs(val)<1.0e+6 && Math.abs(val)>1.0e-5) {
     if(val>0.0) return " "+s.substring(0,10)     //Medium size numbers w/o exponents
     else return s.substring(0,11)}

  ie=s.indexOf("e")     //Numbers with exponents

  if(ie>0) {
    mant=s.substring(0,ie)
    if(val>=0.0) mant=" "+mant
    if(mant.length>8) mant=mant.substring(0,8)
    if(Math.abs(val)>1.0) mant=mant+"e+"
    else if(Math.abs(val)<1.0) mant=mant+"e-"}

  else if(Math.abs(val)>=1.0e+6) {     //Large numbers without exponents
    if(val>0) mant=" "+s.substring(0,1)+"."+s.substring(1,6)+"e+"
    else mant=s.substring(0,2)+"."+s.substring(1,6)+"e+"}

  else if(val == 0.0) {
	return 0.0;}  
  
  else if(Math.abs(val)<=1.0e-5) {      //Small numbers without exponents
    ip=s.indexOf(".") 
    t=s.substring(ip+1,s.length)
    ix=1
    while(t.substring(0,1)=="0") {
      t=t.substring(1,t.length)
      ix++}
    if(val>0) mant=" "+t.substring(0,1)+"."+t.substring(1,6)+"e-"
    else mant=s.substring(0,2)+"."+t.substring(1,6)+"e-"}

  xpo=Math.abs(Math.floor(Math.log(Math.abs(val))/Math.log(10.0)))
  xpos=""+xpo
  if(xpo<10) return mant+"00"+xpos
  if(xpo<100) return mant+"0"+xpos
  return mant+xpos
    
}

function performCalculations(form) {
	// u1, p1, rho1, gam1, u4, p4, rho4, gam4 
    let iter = 1;
    const eps = 0.100000034e-5;
	
	// g=eval(form.g.value) 
	
	u1 = eval(form.u1.value)
	p1 = eval(form.p1.value)
	rho1 = eval(form.rho1.value)
	gam1 = eval(form.gam1.value)
	
	u4 = eval(form.u4.value)
	p4 = eval(form.p4.value)
	rho4 = eval(form.rho4.value)
	gam4 = eval(form.gam4.value)
	
	// Initial calculations
    const delta1 = 0.5 * (gam1 - 1);
    const delta4 = 0.5 * (gam4 - 1);
    const kappa1 = 0.5 * (gam1 + 1);
    const kappa4 = 0.5 * (gam4 + 1);
    const beta1 = gam1 / delta1;
    const beta4 = gam4 / delta4;
    const a1 = Math.sqrt(gam1 * p1 / rho1);
    const a4 = Math.sqrt(gam4 * p4 / rho4);

    const gam = 0.5 * (gam1 + gam4);
    const deltam = 0.5 * (gam - 1);
    const alfam = deltam / gam;
	
    const z = (a4 / a1) * Math.pow((p1 / p4), alfam);
    let vel = (z * (a1 / deltam + u1) - (a4 / deltam - u4)) / (1 + z);
    // console.log(`Initial velocity = ${vel.toFixed(3)} m/s`);
	
	// Initialize p2, dp2, a2, etc., outside the loop to avoid undefined errors
    let p2, dp2, a2, M2a, M1a, M1r, M1rq, w1;
    let p3, dp3, a3, M3a, M4a, M4r, M4rq, w4;

    while (true) {
        //let p2, dp2, a2, M2a, M1a, M1r, M1rq, w1;

        if (vel <= u1) {  // Left wave if shock
            const x1 = kappa1 * (u1 - vel) / (2 * a1);
            M1r = x1 + Math.sqrt(1 + Math.pow(x1, 2));
            M1rq = Math.pow(M1r, 2);
            p2 = p1 * (1 + gam1 * (M1rq - 1) / kappa1);
            dp2 = -2 * gam1 * p1 * M1r / (a1 * (1 / M1rq + 1));
            a2 = a1 * Math.sqrt((gam1 + 1 + (gam1 - 1) * (p2 / p1)) / (gam1 + 1 + (gam1 - 1) * (p1 / p2)));
            w1 = u1 - M1r * a1;
            M1a = u1 / a1;
            M2a = vel / a2;
        } else {  // Left wave if expansion
            a2 = a1 - delta1 * (vel - u1);
            p2 = p1 * Math.pow((a2 / a1), beta1);
            dp2 = -gam1 * p2 / a2;
            M2a = vel / a2;
            M1a = u1 / a1;
        }
		
		//console.log(`p2 = ${p2.toFixed(3)}`);

        //let p3, dp3, a3, M3a, M4a, M4r, M4rq, w4;

        if (vel >= u4) {  // Right wave if shock
            const x4 = kappa4 * (u4 - vel) / (2 * a4);
            M4r = x4 - Math.sqrt(1 + Math.pow(x4, 2));
            M4rq = Math.pow(M4r, 2);
            p3 = p4 * (1 + gam4 * (M4rq - 1) / kappa4);
            dp3 = -2 * gam4 * p4 * M4r / (a4 * (1 / M4rq + 1));
            a3 = a4 * Math.sqrt((gam4 + 1 + (gam4 - 1) * (p3 / p4)) / (gam4 + 1 + (gam4 - 1) * (p4 / p3)));
            w4 = M4r * a4 + u4;
            M4a = u4 / a4;
            M3a = vel / a3;
        } else {  // Right wave if expansion
            a3 = a4 + delta4 * (vel - u4);
            p3 = p4 * Math.pow((a3 / a4), beta4);
            dp3 = gam4 * p3 / a3;
            M3a = vel / a3;
            M4a = u4 / a4;
        }

        // Convergence check
        if (Math.abs(1 - p2 / p3) > eps) {
            vel = vel - (p2 - p3) / (dp2 - dp3);  // Update velocity
            iter += 1;
			//console.log(`convergence check`);
        } else {
            break;
        }
    }
	
	// console.log(`iter = ${iter.toFixed(3)}`);

	//console.log(`p2 = ${p2.toFixed(3)}`);

    // Final results
	// console.log(`a3 = ${a3.toFixed(3)} m/s`);
    const rho2 = gam1 * (p2 / Math.pow(a2, 2));
    const rho3 = gam4 * (p3 / Math.pow(a3, 2));

    // Output the final values (replace with actual HTML output elements as needed)
    // console.log(`Final velocity = ${vel.toFixed(3)} m/s`);
    // console.log(`Density rho2 = ${rho2.toFixed(3)}, Density rho3 = ${rho3.toFixed(3)}`);
	
	form.vel1.value=format(""+vel)
	form.vel2.value=format(""+vel)
	form.p2.value=format(""+p2)
	form.p3.value=format(""+p3)
	form.rho2.value=format(""+rho2)
	form.rho3.value=format(""+rho3)
	form.a2.value=format(""+a2)
	form.a3.value=format(""+a3)


}

</script>
</head>

<font size="6"><b>"SENSATE ESPERIENZE E CERTE DIMOSTRAZIONI"</b> 	- Bernardo "Bomber" Favini <i></i></font>

<hr>
<form>
<big><b>Isentropic Flow Relations</b></big>
Gamma = <input type="text" name="g" value="1.4" size="6">, angles in degrees.
<ul>
<b>INPUT:</b> 
<select type="text" name="i">
<option selected="selected"> Mach number
</option><option> T/T0
</option><option> p/p0
</option><option> rho/rho0
</option><option> A/A* (sub)
</option><option> A/A* (sup)
</option><option> Mach angle (deg.)
</option><option> P-M angle (deg.)
</option></select>
=
<input type="text" name="v" value="2.0" size="12">
<input type="button" value="Calculate" onclick="isent(this.form)">
<table border="">
<tbody><tr><th>Mach number=</th><th><input type="text" name="m" size="12"></th>
<th> </th><th>Mach angle=</th><th><input type="text" name="mu" size="12"></th>
<th> </th><th>P-M angle=</th><th><input type="text" name="nu" size="12"></th></tr>

<tr><th>p/p<sub>0</sub>=</th><th><input type="text" name="pp0" size="12"></th>
<th> </th><th>rho/rho<sub>0</sub>=</th><th><input type="text" name="rr0" size="12"></th>
<th> </th><th>T/T<sub>0</sub>=</th><th><input type="text" name="tt0" size="12"></th>
<th> </th><th>a/a<sub>0</sub>=</th><th><input type="text" name="aa0" size="12"></th>
</tr>

<tr><th>p/p*=</th><th><input type="text" name="pps" size="12"></th>
<th> </th><th>rho/rho*=</th><th><input type="text" name="rrs" size="12"></th>
<th> </th><th>T/T*=</th><th><input type="text" name="tts" size="12"></th>
<th> </th><th>A/A*=</th><th><input type="text" name="aas" size="12"></th></tr>
</tbody></table>
</ul>
</form>

<hr>

<form>
<big><b>Normal Shock Relations</b></big>
Gamma = <input type="text" name="g" value="1.4" size="6">
<ul>
<b>INPUT:</b> 
<select type="text" name="i">
<option selected="selected"> M1
</option><option> M2
</option><option> p2/p1
</option><option> rho2/rho1
</option><option> T2/T1
</option><option> p02/p01
</option><option> p1/p02
</option></select>
=
<input type="text" name="v" value="2.0" size="12">
<input type="button" value="Calculate" onclick="nsr(this.form)">

<table border="">
<tbody><tr><th>M<sub>1</sub>=</th><th><input type="text" name="m1" size="12"></th>
<th> </th><th>M<sub>2</sub>=</th><th><input type="text" name="m2" size="12"></th>
<th> </th><th>p<sub>02</sub>/p<sub>01</sub>=</th><th><input type="text" name="p02p01" size="12"></th>
<th> </th><th>p<sub>1</sub>/p<sub>02</sub>=</th><th><input type="text" name="p1p02" size="12"></th></tr>

<tr><th>p<sub>2</sub>/p<sub>1</sub>=</th><th><input type="text" name="p2p1" size="12"></th>
<th> </th><th>rho<sub>2</sub>/rho<sub>1</sub>=</th><th><input type="text" name="r2r1" size="12"></th>
<th> </th><th>T<sub>2</sub>/T<sub>1</sub>=</th><th><input type="text" name="t2t1" size="12"></th>
<th> </th><th>a<sub>2</sub>/a<sub>1</sub>=</th><th><input type="text" name="a2a1" size="12"></th></tr>

</tbody></table>
</ul>
</form>

<hr>

<form>
<big><b>Oblique Shock Relations</b></big>
Gamma = <input type="text" name="g" value="1.4" size="6">, angles in degrees.
<ul>
<b>INPUT:</b> 
M1 = <input type="text" name="m" value="5.0" size="12">
<select type="text" name="i">
<option selected="selected"> Turn angle (weak shock)
</option><option> Turn angle (strong shock)
</option><option> Shock angle
</option><option> M1n
</option></select>
=
<input type="text" name="a" value="20.0" size="12">
<input type="button" value="Calculate" onclick="osr(this.form)">

<table border="">
<tbody><tr><th>M<sub>2</sub>=</th><th><input type="text" name="m2" size="12"></th>
<th> </th><th>Turn ang.=</th><th><input type="text" name="delta" size="12"></th>
<th> </th><th>Shock ang.=</th><th><input type="text" name="beta" size="12"></th>
<th> </th><th>Sigma max.=</th><th><input type="text" name="sig_max" size="12"></th>
</tr>

<tr><th>p<sub>2</sub>/p<sub>1</sub>=</th><th><input type="text" name="p2p1" size="12"></th>
<th> </th><th>rho<sub>2</sub>/rho<sub>1</sub>=</th><th><input type="text" name="r2r1" size="12"></th>
<th> </th><th>T<sub>2</sub>/T<sub>1</sub>=</th><th><input type="text" name="t2t1" size="12"></th>
<th> </th><th>Theta max.=</th><th><input type="text" name="theta_max" size="12"></th>
</tr>

<tr><th>p<sub>02</sub>/p<sub>01</sub>=</th><th><input type="text" name="p02p01" size="12"></th>
<th> </th><th>M<sub>1n</sub>=</th><th><input type="text" name="m1n" size="12"></th>
<th> </th><th>M<sub>2n</sub>=</th><th><input type="text" name="m2n" size="12"></th></tr>

</tbody></table>
</ul>
</form>

<hr>


<!>

<form>
    <big><b>Riemann problem</b></big>

    <ul>
        <b>INPUT:</b> 
        <table border="">
            <tbody>
                <tr>
                    <th>u<sub>1</sub>=</th><th><input type="text" name="u1" size="12"></th>
                    <th> </th><th>P<sub>1</sub>=</th><th><input type="text" name="p1" size="12"></th>
                    <th> </th><th>rho<sub>1</sub>=</th><th><input type="text" name="rho1" size="12"></th>
                    <th> </th><th>gamma<sub>1</sub>=</th><th><input value="1.4" type="text" name="gam1" size="12"></th>
                </tr>
                <tr>
                    <th>u<sub>4</sub>=</th><th><input type="text" name="u4" size="12"></th>
                    <th> </th><th>P<sub>4</sub>=</th><th><input type="text" name="p4" size="12"></th>
                    <th> </th><th>rho<sub>4</sub>=</th><th><input type="text" name="rho4" size="12"></th>
                    <th> </th><th>gamma<sub>4</sub>=</th><th><input value="1.4" type="text" name="gam4" size="12"></th>
                </tr>
            </tbody>
        </table>
    </ul>

    <br>

    <ul>
        <b>OUTPUT:</b> 
        <table border="">
            <tbody>
                <tr>
                    <th>u<sub>2</sub>=</th><th><input type="text" name="vel1" size="12"></th>
                    <th> </th><th>P<sub>2</sub>=</th><th><input type="text" name="p2" size="12"></th>
                    <th> </th><th>rho<sub>2</sub>=</th><th><input type="text" name="rho2" size="12"></th>
                    <th> </th><th>a<sub>2</sub>=</th><th><input type="text" name="a2" size="12"></th>
                </tr>
                <tr>
                    <th>u<sub>3</sub>=</th><th><input type="text" name="vel2" size="12"></th>
                    <th> </th><th>P<sub>3</sub>=</th><th><input type="text" name="p3" size="12"></th>
                    <th> </th><th>rho<sub>3</sub>=</th><th><input type="text" name="rho3" size="12"></th>
                    <th> </th><th>a<sub>3</sub>=</th><th><input type="text" name="a3" size="12"></th>
                </tr>
            </tbody>
        </table>
    </ul>
	
	<ul>
		<input type="button" value="Calculate" onclick="performCalculations(this.form)">
	</ul>
</form>


<!>



</body></html>
